{"ast":null,"code":"import _objectSpread from\"C:/Users/N\\u0130DAA/Cargo Digital Twin Test Lab/mobile-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import localforage from'localforage';// LocalForage konfigürasyonu\nlocalforage.config({name:'cargo-mobile-app',storeName:'offline-queue'});export class OfflineQueueService{constructor(){this.queueKey='offline-queue';this.syncKey='last-sync';this.apiBaseUrl=process.env.NODE_ENV==='development'?'   http://localhost:3001':'http://10.0.2.2:3001';}// Queue'ya veri ekle\nasync addToQueue(data){try{const queue=await this.getQueue();const queueItem={id:\"queue-\".concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9)),type:data.type,data:data,timestamp:new Date().toISOString(),deviceId:data.deviceId||'unknown',status:'pending',retryCount:0,maxRetries:3};queue.push(queueItem);await this.saveQueue(queue);console.log('📱 Veri kuyruğa eklendi:',queueItem);return queueItem.id;}catch(error){console.error('❌ Queue ekleme hatası:',error);throw error;}}// Queue'dan veri al\nasync getQueue(){try{const queue=await localforage.getItem(this.queueKey);return queue||[];}catch(error){console.error('❌ Queue okuma hatası:',error);return[];}}// Queue'yu kaydet\nasync saveQueue(queue){try{await localforage.setItem(this.queueKey,queue);}catch(error){console.error('❌ Queue kaydetme hatası:',error);throw error;}}// Queue uzunluğunu al\nasync getQueueLength(){const queue=await this.getQueue();return queue.length;}// Queue'dan veri kaldır\nasync removeFromQueue(id){try{const queue=await this.getQueue();const filteredQueue=queue.filter(item=>item.id!==id);await this.saveQueue(filteredQueue);return true;}catch(error){console.error('❌ Queue silme hatası:',error);return false;}}// Queue'yu sunucu ile senkronize et\nasync syncWithServer(){try{const queue=await this.getQueue();if(queue.length===0){return 0;}let syncedCount=0;const failedItems=[];for(const item of queue){try{// API'ye gönder\nconst success=await this.sendToServer(item);if(success){// Başarılı olanı queue'dan kaldır\nawait this.removeFromQueue(item.id);syncedCount++;}else{// Başarısız olanı retry count'u artır\nitem.retryCount++;if(item.retryCount>=item.maxRetries){item.status='failed';failedItems.push(item);}}}catch(error){console.error(\"\\u274C Senkronizasyon hatas\\u0131 (\".concat(item.id,\"):\"),error);item.retryCount++;if(item.retryCount>=item.maxRetries){item.status='failed';failedItems.push(item);}}}// Failed item'ları güncelle\nif(failedItems.length>0){const updatedQueue=await this.getQueue();const newQueue=updatedQueue.map(item=>{const failedItem=failedItems.find(fi=>fi.id===item.id);return failedItem||item;});await this.saveQueue(newQueue);}// Son senkronizasyon zamanını kaydet\nawait this.updateLastSync();console.log(\"\\u2705 \".concat(syncedCount,\" veri senkronize edildi\"));return syncedCount;}catch(error){console.error('❌ Genel senkronizasyon hatası:',error);throw error;}}// Veriyi sunucuya gönder\nasync sendToServer(item){try{const endpoint=this.getEndpointForType(item.type);if(!endpoint){console.warn(\"\\u26A0\\uFE0F Bilinmeyen tip i\\xE7in endpoint yok: \".concat(item.type));return false;}const response=await fetch(\"\".concat(this.apiBaseUrl).concat(endpoint),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(_objectSpread(_objectSpread({},item.data),{},{offlineQueueId:item.id,deviceId:item.deviceId,originalTimestamp:item.timestamp}))});if(response.ok){console.log(\"\\u2705 Veri sunucuya g\\xF6nderildi: \".concat(item.id));return true;}else{console.warn(\"\\u26A0\\uFE0F Sunucu hatas\\u0131: \".concat(response.status,\" - \").concat(item.id));return false;}}catch(error){console.error(\"\\u274C Sunucu g\\xF6nderim hatas\\u0131 (\".concat(item.id,\"):\"),error);return false;}}// Tip için endpoint al\ngetEndpointForType(type){const endpoints={'barcode_scan':'/api/scan','awb-acceptance':'/api/awb/acceptance','uld-loading':'/api/uld/loading','dg-control':'/api/dg/control','photo-capture':'/api/photo','signature':'/api/signature'};return endpoints[type]||null;}// Son senkronizasyon zamanını güncelle\nasync updateLastSync(){try{await localforage.setItem(this.syncKey,new Date().toISOString());}catch(error){console.error('❌ Son senkronizasyon zamanı güncellenemedi:',error);}}// Son senkronizasyon zamanını al\nasync getLastSync(){try{return await localforage.getItem(this.syncKey);}catch(error){console.error('❌ Son senkronizasyon zamanı alınamadı:',error);return null;}}// Queue'yu temizle\nasync clearQueue(){try{await localforage.removeItem(this.queueKey);console.log('🗑️ Queue temizlendi');return true;}catch(error){console.error('❌ Queue temizleme hatası:',error);return false;}}// Queue istatistikleri\nasync getQueueStats(){try{const queue=await this.getQueue();const stats={total:queue.length,pending:queue.filter(item=>item.status==='pending').length,failed:queue.filter(item=>item.status==='failed').length,byType:{}};// Tip bazında sayım\nqueue.forEach(item=>{if(!stats.byType[item.type]){stats.byType[item.type]=0;}stats.byType[item.type]++;});return stats;}catch(error){console.error('❌ Queue istatistikleri alınamadı:',error);return null;}}}","map":{"version":3,"names":["localforage","config","name","storeName","OfflineQueueService","constructor","queueKey","syncKey","apiBaseUrl","process","env","NODE_ENV","addToQueue","data","queue","getQueue","queueItem","id","concat","Date","now","Math","random","toString","substr","type","timestamp","toISOString","deviceId","status","retryCount","maxRetries","push","saveQueue","console","log","error","getItem","setItem","getQueueLength","length","removeFromQueue","filteredQueue","filter","item","syncWithServer","syncedCount","failedItems","success","sendToServer","updatedQueue","newQueue","map","failedItem","find","fi","updateLastSync","endpoint","getEndpointForType","warn","response","fetch","method","headers","body","JSON","stringify","_objectSpread","offlineQueueId","originalTimestamp","ok","endpoints","getLastSync","clearQueue","removeItem","getQueueStats","stats","total","pending","failed","byType","forEach"],"sources":["C:/Users/NİDAA/Cargo Digital Twin Test Lab/mobile-app/src/services/OfflineQueueService.js"],"sourcesContent":["import localforage from 'localforage';\r\n\r\n// LocalForage konfigürasyonu\r\nlocalforage.config({\r\n  name: 'cargo-mobile-app',\r\n  storeName: 'offline-queue'\r\n});\r\n\r\nexport class OfflineQueueService {\r\n  constructor() {\r\n    this.queueKey = 'offline-queue';\r\n    this.syncKey = 'last-sync';\r\n    this.apiBaseUrl = process.env.NODE_ENV === 'development' \r\n      ? '   http://localhost:3001' \r\n      : 'http://10.0.2.2:3001';\r\n  }\r\n\r\n  // Queue'ya veri ekle\r\n  async addToQueue(data) {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const queueItem = {\r\n        id: `queue-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        type: data.type,\r\n        data: data,\r\n        timestamp: new Date().toISOString(),\r\n        deviceId: data.deviceId || 'unknown',\r\n        status: 'pending',\r\n        retryCount: 0,\r\n        maxRetries: 3\r\n      };\r\n\r\n      queue.push(queueItem);\r\n      await this.saveQueue(queue);\r\n\r\n      console.log('📱 Veri kuyruğa eklendi:', queueItem);\r\n      return queueItem.id;\r\n    } catch (error) {\r\n      console.error('❌ Queue ekleme hatası:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Queue'dan veri al\r\n  async getQueue() {\r\n    try {\r\n      const queue = await localforage.getItem(this.queueKey);\r\n      return queue || [];\r\n    } catch (error) {\r\n      console.error('❌ Queue okuma hatası:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Queue'yu kaydet\r\n  async saveQueue(queue) {\r\n    try {\r\n      await localforage.setItem(this.queueKey, queue);\r\n    } catch (error) {\r\n      console.error('❌ Queue kaydetme hatası:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Queue uzunluğunu al\r\n  async getQueueLength() {\r\n    const queue = await this.getQueue();\r\n    return queue.length;\r\n  }\r\n\r\n  // Queue'dan veri kaldır\r\n  async removeFromQueue(id) {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const filteredQueue = queue.filter(item => item.id !== id);\r\n      await this.saveQueue(filteredQueue);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Queue silme hatası:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Queue'yu sunucu ile senkronize et\r\n  async syncWithServer() {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      if (queue.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      let syncedCount = 0;\r\n      const failedItems = [];\r\n\r\n      for (const item of queue) {\r\n        try {\r\n          // API'ye gönder\r\n          const success = await this.sendToServer(item);\r\n          \r\n          if (success) {\r\n            // Başarılı olanı queue'dan kaldır\r\n            await this.removeFromQueue(item.id);\r\n            syncedCount++;\r\n          } else {\r\n            // Başarısız olanı retry count'u artır\r\n            item.retryCount++;\r\n            if (item.retryCount >= item.maxRetries) {\r\n              item.status = 'failed';\r\n              failedItems.push(item);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`❌ Senkronizasyon hatası (${item.id}):`, error);\r\n          item.retryCount++;\r\n          if (item.retryCount >= item.maxRetries) {\r\n            item.status = 'failed';\r\n            failedItems.push(item);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Failed item'ları güncelle\r\n      if (failedItems.length > 0) {\r\n        const updatedQueue = await this.getQueue();\r\n        const newQueue = updatedQueue.map(item => {\r\n          const failedItem = failedItems.find(fi => fi.id === item.id);\r\n          return failedItem || item;\r\n        });\r\n        await this.saveQueue(newQueue);\r\n      }\r\n\r\n      // Son senkronizasyon zamanını kaydet\r\n      await this.updateLastSync();\r\n\r\n      console.log(`✅ ${syncedCount} veri senkronize edildi`);\r\n      return syncedCount;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Genel senkronizasyon hatası:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Veriyi sunucuya gönder\r\n  async sendToServer(item) {\r\n    try {\r\n      const endpoint = this.getEndpointForType(item.type);\r\n      if (!endpoint) {\r\n        console.warn(`⚠️ Bilinmeyen tip için endpoint yok: ${item.type}`);\r\n        return false;\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...item.data,\r\n          offlineQueueId: item.id,\r\n          deviceId: item.deviceId,\r\n          originalTimestamp: item.timestamp\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(`✅ Veri sunucuya gönderildi: ${item.id}`);\r\n        return true;\r\n      } else {\r\n        console.warn(`⚠️ Sunucu hatası: ${response.status} - ${item.id}`);\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(`❌ Sunucu gönderim hatası (${item.id}):`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Tip için endpoint al\r\n  getEndpointForType(type) {\r\n    const endpoints = {\r\n      'barcode_scan': '/api/scan',\r\n      'awb-acceptance': '/api/awb/acceptance',\r\n      'uld-loading': '/api/uld/loading',\r\n      'dg-control': '/api/dg/control',\r\n      'photo-capture': '/api/photo',\r\n      'signature': '/api/signature'\r\n    };\r\n\r\n    return endpoints[type] || null;\r\n  }\r\n\r\n  // Son senkronizasyon zamanını güncelle\r\n  async updateLastSync() {\r\n    try {\r\n      await localforage.setItem(this.syncKey, new Date().toISOString());\r\n    } catch (error) {\r\n      console.error('❌ Son senkronizasyon zamanı güncellenemedi:', error);\r\n    }\r\n  }\r\n\r\n  // Son senkronizasyon zamanını al\r\n  async getLastSync() {\r\n    try {\r\n      return await localforage.getItem(this.syncKey);\r\n    } catch (error) {\r\n      console.error('❌ Son senkronizasyon zamanı alınamadı:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Queue'yu temizle\r\n  async clearQueue() {\r\n    try {\r\n      await localforage.removeItem(this.queueKey);\r\n      console.log('🗑️ Queue temizlendi');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Queue temizleme hatası:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Queue istatistikleri\r\n  async getQueueStats() {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const stats = {\r\n        total: queue.length,\r\n        pending: queue.filter(item => item.status === 'pending').length,\r\n        failed: queue.filter(item => item.status === 'failed').length,\r\n        byType: {}\r\n      };\r\n\r\n      // Tip bazında sayım\r\n      queue.forEach(item => {\r\n        if (!stats.byType[item.type]) {\r\n          stats.byType[item.type] = 0;\r\n        }\r\n        stats.byType[item.type]++;\r\n      });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      console.error('❌ Queue istatistikleri alınamadı:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}