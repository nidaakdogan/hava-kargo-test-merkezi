{"ast":null,"code":"import localforage from 'localforage';\n\n// LocalForage konfig√ºrasyonu\nlocalforage.config({\n  name: 'cargo-mobile-app',\n  storeName: 'offline-queue'\n});\nexport class OfflineQueueService {\n  constructor() {\n    this.queueKey = 'offline-queue';\n    this.syncKey = 'last-sync';\n\n    // Mobil cihaz algƒ±lama\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    this.apiBaseUrl = 'http://localhost:3001';\n    console.log(`üåê API Base URL: ${this.apiBaseUrl} (Mobile: ${isMobile})`);\n  }\n\n  // Queue'ya veri ekle\n  async addToQueue(data) {\n    try {\n      const queue = await this.getQueue();\n      const queueItem = {\n        id: `queue-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        type: data.type,\n        data: data,\n        timestamp: new Date().toISOString(),\n        deviceId: data.deviceId || 'unknown',\n        status: 'pending',\n        retryCount: 0,\n        maxRetries: 3\n      };\n      queue.push(queueItem);\n      await this.saveQueue(queue);\n      console.log('üì± Veri kuyruƒüa eklendi:', queueItem);\n      return queueItem.id;\n    } catch (error) {\n      console.error('‚ùå Queue ekleme hatasƒ±:', error);\n      throw error;\n    }\n  }\n\n  // Queue'dan veri al\n  async getQueue() {\n    try {\n      const queue = await localforage.getItem(this.queueKey);\n      return queue || [];\n    } catch (error) {\n      console.error('‚ùå Queue okuma hatasƒ±:', error);\n      return [];\n    }\n  }\n\n  // Queue'yu kaydet\n  async saveQueue(queue) {\n    try {\n      await localforage.setItem(this.queueKey, queue);\n    } catch (error) {\n      console.error('‚ùå Queue kaydetme hatasƒ±:', error);\n      throw error;\n    }\n  }\n\n  // Queue uzunluƒüunu al\n  async getQueueLength() {\n    const queue = await this.getQueue();\n    return queue.length;\n  }\n\n  // Queue'dan veri kaldƒ±r\n  async removeFromQueue(id) {\n    try {\n      const queue = await this.getQueue();\n      const filteredQueue = queue.filter(item => item.id !== id);\n      await this.saveQueue(filteredQueue);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Queue silme hatasƒ±:', error);\n      return false;\n    }\n  }\n\n  // Queue'yu sunucu ile senkronize et\n  async syncWithServer() {\n    try {\n      const queue = await this.getQueue();\n      if (queue.length === 0) {\n        return 0;\n      }\n      let syncedCount = 0;\n      const failedItems = [];\n      for (const item of queue) {\n        try {\n          // API'ye g√∂nder\n          const success = await this.sendToServer(item);\n          if (success) {\n            // Ba≈üarƒ±lƒ± olanƒ± queue'dan kaldƒ±r\n            await this.removeFromQueue(item.id);\n            syncedCount++;\n          } else {\n            // Ba≈üarƒ±sƒ±z olanƒ± retry count'u artƒ±r\n            item.retryCount++;\n            if (item.retryCount >= item.maxRetries) {\n              item.status = 'failed';\n              failedItems.push(item);\n            }\n          }\n        } catch (error) {\n          console.error(`‚ùå Senkronizasyon hatasƒ± (${item.id}):`, error);\n          item.retryCount++;\n          if (item.retryCount >= item.maxRetries) {\n            item.status = 'failed';\n            failedItems.push(item);\n          }\n        }\n      }\n\n      // Failed item'larƒ± g√ºncelle\n      if (failedItems.length > 0) {\n        const updatedQueue = await this.getQueue();\n        const newQueue = updatedQueue.map(item => {\n          const failedItem = failedItems.find(fi => fi.id === item.id);\n          return failedItem || item;\n        });\n        await this.saveQueue(newQueue);\n      }\n\n      // Son senkronizasyon zamanƒ±nƒ± kaydet\n      await this.updateLastSync();\n      console.log(`‚úÖ ${syncedCount} veri senkronize edildi`);\n      return syncedCount;\n    } catch (error) {\n      console.error('‚ùå Genel senkronizasyon hatasƒ±:', error);\n      throw error;\n    }\n  }\n\n  // Veriyi sunucuya g√∂nder\n  async sendToServer(item) {\n    try {\n      const endpoint = this.getEndpointForType(item.type);\n      if (!endpoint) {\n        console.warn(`‚ö†Ô∏è Bilinmeyen tip i√ßin endpoint yok: ${item.type}`);\n        return false;\n      }\n      const response = await fetch(`${this.apiBaseUrl}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...item.data,\n          offlineQueueId: item.id,\n          deviceId: item.deviceId,\n          originalTimestamp: item.timestamp\n        })\n      });\n      if (response.ok) {\n        console.log(`‚úÖ Veri sunucuya g√∂nderildi: ${item.id}`);\n        return true;\n      } else {\n        console.warn(`‚ö†Ô∏è Sunucu hatasƒ±: ${response.status} - ${item.id}`);\n        return false;\n      }\n    } catch (error) {\n      console.error(`‚ùå Sunucu g√∂nderim hatasƒ± (${item.id}):`, error);\n      return false;\n    }\n  }\n\n  // Tip i√ßin endpoint al\n  getEndpointForType(type) {\n    const endpoints = {\n      'barcode_scan': '/api/scan',\n      'awb-acceptance': '/api/awb/acceptance',\n      'uld-loading': '/api/uld/loading',\n      'dg-control': '/api/dg/control',\n      'photo-capture': '/api/photo',\n      'signature': '/api/signature'\n    };\n    return endpoints[type] || null;\n  }\n\n  // Son senkronizasyon zamanƒ±nƒ± g√ºncelle\n  async updateLastSync() {\n    try {\n      await localforage.setItem(this.syncKey, new Date().toISOString());\n    } catch (error) {\n      console.error('‚ùå Son senkronizasyon zamanƒ± g√ºncellenemedi:', error);\n    }\n  }\n\n  // Son senkronizasyon zamanƒ±nƒ± al\n  async getLastSync() {\n    try {\n      return await localforage.getItem(this.syncKey);\n    } catch (error) {\n      console.error('‚ùå Son senkronizasyon zamanƒ± alƒ±namadƒ±:', error);\n      return null;\n    }\n  }\n\n  // Queue'yu temizle\n  async clearQueue() {\n    try {\n      await localforage.removeItem(this.queueKey);\n      console.log('üóëÔ∏è Queue temizlendi');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Queue temizleme hatasƒ±:', error);\n      return false;\n    }\n  }\n\n  // Queue istatistikleri\n  async getQueueStats() {\n    try {\n      const queue = await this.getQueue();\n      const stats = {\n        total: queue.length,\n        pending: queue.filter(item => item.status === 'pending').length,\n        failed: queue.filter(item => item.status === 'failed').length,\n        byType: {}\n      };\n\n      // Tip bazƒ±nda sayƒ±m\n      queue.forEach(item => {\n        if (!stats.byType[item.type]) {\n          stats.byType[item.type] = 0;\n        }\n        stats.byType[item.type]++;\n      });\n      return stats;\n    } catch (error) {\n      console.error('‚ùå Queue istatistikleri alƒ±namadƒ±:', error);\n      return null;\n    }\n  }\n}","map":{"version":3,"names":["localforage","config","name","storeName","OfflineQueueService","constructor","queueKey","syncKey","isMobile","test","navigator","userAgent","apiBaseUrl","console","log","addToQueue","data","queue","getQueue","queueItem","id","Date","now","Math","random","toString","substr","type","timestamp","toISOString","deviceId","status","retryCount","maxRetries","push","saveQueue","error","getItem","setItem","getQueueLength","length","removeFromQueue","filteredQueue","filter","item","syncWithServer","syncedCount","failedItems","success","sendToServer","updatedQueue","newQueue","map","failedItem","find","fi","updateLastSync","endpoint","getEndpointForType","warn","response","fetch","method","headers","body","JSON","stringify","offlineQueueId","originalTimestamp","ok","endpoints","getLastSync","clearQueue","removeItem","getQueueStats","stats","total","pending","failed","byType","forEach"],"sources":["C:/Users/Nƒ∞DAA/Cargo Digital Twin Test Lab/mobile-app/src/services/OfflineQueueService.js"],"sourcesContent":["import localforage from 'localforage';\r\n\r\n// LocalForage konfig√ºrasyonu\r\nlocalforage.config({\r\n  name: 'cargo-mobile-app',\r\n  storeName: 'offline-queue'\r\n});\r\n\r\nexport class OfflineQueueService {\r\n  constructor() {\r\n    this.queueKey = 'offline-queue';\r\n    this.syncKey = 'last-sync';\r\n    \r\n    // Mobil cihaz algƒ±lama\r\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    this.apiBaseUrl = 'http://localhost:3001';\r\n    \r\n    console.log(`üåê API Base URL: ${this.apiBaseUrl} (Mobile: ${isMobile})`);\r\n  }\r\n\r\n  // Queue'ya veri ekle\r\n  async addToQueue(data) {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const queueItem = {\r\n        id: `queue-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        type: data.type,\r\n        data: data,\r\n        timestamp: new Date().toISOString(),\r\n        deviceId: data.deviceId || 'unknown',\r\n        status: 'pending',\r\n        retryCount: 0,\r\n        maxRetries: 3\r\n      };\r\n\r\n      queue.push(queueItem);\r\n      await this.saveQueue(queue);\r\n\r\n      console.log('üì± Veri kuyruƒüa eklendi:', queueItem);\r\n      return queueItem.id;\r\n    } catch (error) {\r\n      console.error('‚ùå Queue ekleme hatasƒ±:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Queue'dan veri al\r\n  async getQueue() {\r\n    try {\r\n      const queue = await localforage.getItem(this.queueKey);\r\n      return queue || [];\r\n    } catch (error) {\r\n      console.error('‚ùå Queue okuma hatasƒ±:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Queue'yu kaydet\r\n  async saveQueue(queue) {\r\n    try {\r\n      await localforage.setItem(this.queueKey, queue);\r\n    } catch (error) {\r\n      console.error('‚ùå Queue kaydetme hatasƒ±:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Queue uzunluƒüunu al\r\n  async getQueueLength() {\r\n    const queue = await this.getQueue();\r\n    return queue.length;\r\n  }\r\n\r\n  // Queue'dan veri kaldƒ±r\r\n  async removeFromQueue(id) {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const filteredQueue = queue.filter(item => item.id !== id);\r\n      await this.saveQueue(filteredQueue);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Queue silme hatasƒ±:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Queue'yu sunucu ile senkronize et\r\n  async syncWithServer() {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      if (queue.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      let syncedCount = 0;\r\n      const failedItems = [];\r\n\r\n      for (const item of queue) {\r\n        try {\r\n          // API'ye g√∂nder\r\n          const success = await this.sendToServer(item);\r\n          \r\n          if (success) {\r\n            // Ba≈üarƒ±lƒ± olanƒ± queue'dan kaldƒ±r\r\n            await this.removeFromQueue(item.id);\r\n            syncedCount++;\r\n          } else {\r\n            // Ba≈üarƒ±sƒ±z olanƒ± retry count'u artƒ±r\r\n            item.retryCount++;\r\n            if (item.retryCount >= item.maxRetries) {\r\n              item.status = 'failed';\r\n              failedItems.push(item);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`‚ùå Senkronizasyon hatasƒ± (${item.id}):`, error);\r\n          item.retryCount++;\r\n          if (item.retryCount >= item.maxRetries) {\r\n            item.status = 'failed';\r\n            failedItems.push(item);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Failed item'larƒ± g√ºncelle\r\n      if (failedItems.length > 0) {\r\n        const updatedQueue = await this.getQueue();\r\n        const newQueue = updatedQueue.map(item => {\r\n          const failedItem = failedItems.find(fi => fi.id === item.id);\r\n          return failedItem || item;\r\n        });\r\n        await this.saveQueue(newQueue);\r\n      }\r\n\r\n      // Son senkronizasyon zamanƒ±nƒ± kaydet\r\n      await this.updateLastSync();\r\n\r\n      console.log(`‚úÖ ${syncedCount} veri senkronize edildi`);\r\n      return syncedCount;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Genel senkronizasyon hatasƒ±:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Veriyi sunucuya g√∂nder\r\n  async sendToServer(item) {\r\n    try {\r\n      const endpoint = this.getEndpointForType(item.type);\r\n      if (!endpoint) {\r\n        console.warn(`‚ö†Ô∏è Bilinmeyen tip i√ßin endpoint yok: ${item.type}`);\r\n        return false;\r\n      }\r\n\r\n      const response = await fetch(`${this.apiBaseUrl}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...item.data,\r\n          offlineQueueId: item.id,\r\n          deviceId: item.deviceId,\r\n          originalTimestamp: item.timestamp\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(`‚úÖ Veri sunucuya g√∂nderildi: ${item.id}`);\r\n        return true;\r\n      } else {\r\n        console.warn(`‚ö†Ô∏è Sunucu hatasƒ±: ${response.status} - ${item.id}`);\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(`‚ùå Sunucu g√∂nderim hatasƒ± (${item.id}):`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Tip i√ßin endpoint al\r\n  getEndpointForType(type) {\r\n    const endpoints = {\r\n      'barcode_scan': '/api/scan',\r\n      'awb-acceptance': '/api/awb/acceptance',\r\n      'uld-loading': '/api/uld/loading',\r\n      'dg-control': '/api/dg/control',\r\n      'photo-capture': '/api/photo',\r\n      'signature': '/api/signature'\r\n    };\r\n\r\n    return endpoints[type] || null;\r\n  }\r\n\r\n  // Son senkronizasyon zamanƒ±nƒ± g√ºncelle\r\n  async updateLastSync() {\r\n    try {\r\n      await localforage.setItem(this.syncKey, new Date().toISOString());\r\n    } catch (error) {\r\n      console.error('‚ùå Son senkronizasyon zamanƒ± g√ºncellenemedi:', error);\r\n    }\r\n  }\r\n\r\n  // Son senkronizasyon zamanƒ±nƒ± al\r\n  async getLastSync() {\r\n    try {\r\n      return await localforage.getItem(this.syncKey);\r\n    } catch (error) {\r\n      console.error('‚ùå Son senkronizasyon zamanƒ± alƒ±namadƒ±:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Queue'yu temizle\r\n  async clearQueue() {\r\n    try {\r\n      await localforage.removeItem(this.queueKey);\r\n      console.log('üóëÔ∏è Queue temizlendi');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Queue temizleme hatasƒ±:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Queue istatistikleri\r\n  async getQueueStats() {\r\n    try {\r\n      const queue = await this.getQueue();\r\n      const stats = {\r\n        total: queue.length,\r\n        pending: queue.filter(item => item.status === 'pending').length,\r\n        failed: queue.filter(item => item.status === 'failed').length,\r\n        byType: {}\r\n      };\r\n\r\n      // Tip bazƒ±nda sayƒ±m\r\n      queue.forEach(item => {\r\n        if (!stats.byType[item.type]) {\r\n          stats.byType[item.type] = 0;\r\n        }\r\n        stats.byType[item.type]++;\r\n      });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      console.error('‚ùå Queue istatistikleri alƒ±namadƒ±:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}