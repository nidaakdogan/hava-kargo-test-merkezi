const { test, expect } = require('@playwright/test');

test.describe('ULD Web Test Akƒ±≈üƒ±', () => {
  test.beforeEach(async ({ page }) => {
    // Desktop viewport i√ßin
    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/uld');
    
    // Sayfa y√ºklenmesini bekle
    await page.waitForLoadState('networkidle');
  });

  test('ULD Web Test Akƒ±≈üƒ± - Kapasite A≈üƒ±mƒ± Senaryosu', async ({ page }) => {
    console.log('üöÄ ULD Web Testi ba≈üladƒ±');
    
    // Yardƒ±mcƒ± fonksiyon: Adƒ±m kapƒ±sƒ± kontrol√º
    const waitForStepGate = async (selector, timeout = 5000, stepName = '') => {
      try {
        await expect(page.getByTestId(selector)).toBeVisible({ timeout });
        await expect(page.getByTestId(selector)).toBeEnabled({ timeout });
        return true;
      } catch (error) {
        console.log(`‚ùå Adƒ±m kapƒ±sƒ± ba≈üarƒ±sƒ±z: ${stepName} - ${selector} hazƒ±r deƒüil`);
        throw new Error(`Adƒ±m tamamlanamadƒ±: ${stepName} - ${selector} ${timeout}ms i√ßinde hazƒ±r olmadƒ±`);
      }
    };

    // Yardƒ±mcƒ± fonksiyon: Deƒüer kontrol√º
    const waitForValue = async (selector, expectedValue, timeout = 3000) => {
      try {
        await expect(page.getByTestId(selector)).toHaveValue(expectedValue, { timeout });
        return true;
      } catch (error) {
        console.log(`‚ùå Deƒüer kontrol√º ba≈üarƒ±sƒ±z: ${selector} = ${expectedValue}`);
        throw new Error(`Deƒüer kontrol√º ba≈üarƒ±sƒ±z: ${selector} beklenen deƒüeri almadƒ±`);
      }
    };

    // 1. ULD Kapasite sayfasƒ± a√ßƒ±lƒ±r
    await expect(page.getByTestId('uld-form-title')).toBeVisible({ timeout: 10000 });
    await expect(page.getByTestId('uld-form-title')).toHaveText('ULD Kapasite Y√∂netimi');
    console.log('‚úÖ ULD sayfasƒ± a√ßƒ±ldƒ±');

    // 2. ULD Tipi se√ßilir (AKE - LD3) - KRƒ∞Tƒ∞K ADIM
    await waitForStepGate('uld-type-select', 5000, 'ULD Tipi se√ßimi');
    await page.getByTestId('uld-type-select').selectOption('AKE');
    
    // HAZIR Sƒ∞NYALƒ∞ KONTROL ET - Bu olmadan devam etme!
    await expect(page.getByTestId('uld-limits-ready')).toBeVisible({ timeout: 5000 });
    await expect(page.getByTestId('uld-limits-ready')).toHaveAttribute('data-ready', 'true');
    
    // Limitlerin doldurulduƒüunu kontrol et
    await waitForValue('max-weight-input', '1588', 3000);
    await waitForValue('tare-input', '82', 3000);
    await waitForValue('allowable-input', '1506', 3000);
    console.log('‚úÖ ULD tipi se√ßildi ve hazƒ±r sinyali alƒ±ndƒ± - limitler hazƒ±r');

    // 3. ULD Kodu girilir
    await waitForStepGate('uld-code-input', 3000, 'ULD Kodu giri≈üi');
    await page.getByTestId('uld-code-input').fill('AKE12345AB');
    await waitForValue('uld-code-input', 'AKE12345AB', 2000);
    console.log('‚úÖ ULD kodu girildi');

    // 4. (Opsiyonel) U√ßak Tipi se√ßilir
    await waitForStepGate('aircraft-select', 3000, 'U√ßak Tipi se√ßimi');
    await page.getByTestId('aircraft-select').selectOption('B777');
    await page.waitForTimeout(500); // Dropdown kapanmasƒ± i√ßin kƒ±sa bekleme
    console.log('‚úÖ U√ßak tipi se√ßildi');

    // 5. (Opsiyonel) Havayolu se√ßilir
    await waitForStepGate('airline-select', 3000, 'Havayolu se√ßimi');
    await page.getByTestId('airline-select').selectOption('TK');
    await page.waitForTimeout(500); // Dropdown kapanmasƒ± i√ßin kƒ±sa bekleme
    console.log('‚úÖ Havayolu se√ßildi');

    // 6. Mevcut Aƒüƒ±rlƒ±k girilir (limit √ºst√º deƒüer - 1600 kg)
    await waitForStepGate('current-weight-input', 3000, 'Mevcut Aƒüƒ±rlƒ±k giri≈üi');
    await page.getByTestId('current-weight-input').fill('1600');
    await waitForValue('current-weight-input', '1600', 2000);
    
    // Kapasite a≈üƒ±mƒ± uyarƒ±sƒ± kontrol et - KRƒ∞Tƒ∞K!
    await expect(page.getByTestId('capacity-bar-container')).toBeVisible({ timeout: 3000 });
    await expect(page.getByTestId('capacity-overflow-badge')).toBeVisible({ timeout: 3000 });
    
    // Kalan aƒüƒ±rlƒ±k negatif olmalƒ± (a≈üƒ±m)
    const remainingWeight = page.getByTestId('remaining-weight-input');
    await expect(remainingWeight).toContainText('Kapasite', { timeout: 3000 });
    console.log('‚úÖ Mevcut aƒüƒ±rlƒ±k girildi - kapasite a≈üƒ±mƒ± tespit edildi');

    // 7. Kaydet butonunun aktif olduƒüunu kontrol et - KORUYUCU Kƒ∞Lƒ∞T
    const saveButton = page.getByTestId('submit-uld-form-button');
    await expect(saveButton).toBeEnabled({ timeout: 5000 });
    
    // Zorunlu alanlarƒ±n dolu olduƒüunu doƒürula
    await waitForValue('uld-type-select', 'AKE', 1000);
    await waitForValue('uld-code-input', 'AKE12345AB', 1000);
    await waitForValue('current-weight-input', '1600', 1000);
    
    await saveButton.click();
    await page.waitForTimeout(2000); // API yanƒ±tƒ± i√ßin bekle
    
    // 8. Hata mesajƒ± kontrol et - Kayƒ±t reddedilmeli
    const formMessage = page.getByTestId('uld-form-message');
    await expect(formMessage).toBeVisible({ timeout: 10000 });
    
    // Hata mesajƒ± i√ßeriƒüini kontrol et
    const messageText = await formMessage.textContent();
    expect(messageText).toMatch(/kapasite|a≈üƒ±ldƒ±|ba≈üarƒ±sƒ±z/i);
    console.log('‚úÖ Kayƒ±t reddedildi - kapasite a≈üƒ±mƒ± mesajƒ± g√∂r√ºnt√ºlendi');

    // 9. Toast mesajlarƒ± kontrol et
    const toast = page.locator('.toast');
    if (await toast.isVisible()) {
      const toastText = await toast.textContent();
      console.log('üì± Toast mesajƒ±:', toastText);
    }

    console.log('üéâ ULD Web Testi tamamlandƒ± - Kapasite a≈üƒ±mƒ± senaryosu ba≈üarƒ±lƒ±');
  });

  test('ULD form alanlarƒ± doƒüru sƒ±rayla dolduruluyor', async ({ page }) => {
    // ULD tipi se√ßilmeden √∂nce aƒüƒ±rlƒ±k alanƒ± disabled olmalƒ±
    const currentWeightInput = page.getByTestId('current-weight-input');
    await expect(currentWeightInput).toBeDisabled();
    
    // ULD tipi se√ß
    await page.getByTestId('uld-type-select').selectOption('AKE');
    await page.waitForTimeout(1000);
    
    // Artƒ±k aƒüƒ±rlƒ±k alanƒ± aktif olmalƒ±
    await expect(currentWeightInput).toBeEnabled();
    
    // Form alanlarƒ±nƒ±n doldurulduƒüunu kontrol et
    await expect(page.getByTestId('max-weight-input')).toHaveValue('1588');
    await expect(page.getByTestId('tare-input')).toHaveValue('82');
    await expect(page.getByTestId('allowable-input')).toHaveValue('1506');
  });

  test('ULD form validasyonu √ßalƒ±≈üƒ±yor', async ({ page }) => {
    // Bo≈ü form ile kaydet
    await page.getByTestId('submit-uld-form-button').click();
    
    // Hata mesajƒ± g√∂r√ºnmeli
    await expect(page.locator('.form-message')).toBeVisible({ timeout: 10000 });
  });

  test('ULD form temizleme √ßalƒ±≈üƒ±yor', async ({ page }) => {
    // Form doldur
    await page.getByTestId('uld-type-select').selectOption('AKE');
    await page.getByTestId('uld-code-input').fill('TEST123');
    await page.getByTestId('current-weight-input').fill('1000');
    
    // Formu temizle
    await page.getByTestId('clear-uld-form-button').click();
    
    // Alanlarƒ±n temizlendiƒüini kontrol et
    await expect(page.getByTestId('uld-code-input')).toHaveValue('');
    await expect(page.getByTestId('current-weight-input')).toHaveValue('');
  });

  test('ULD kapasite hesaplamalarƒ± doƒüru √ßalƒ±≈üƒ±yor', async ({ page }) => {
    // AKE tipini se√ß
    await page.getByTestId('uld-type-select').selectOption('AKE');
    await page.waitForTimeout(1000);
    
    // MGW = 1588, Tare = 82, Allowable = 1506
    await expect(page.getByTestId('max-weight-input')).toHaveValue('1588');
    await expect(page.getByTestId('tare-input')).toHaveValue('82');
    await expect(page.getByTestId('allowable-input')).toHaveValue('1506');
    
    // Mevcut aƒüƒ±rlƒ±k gir (1500 kg - %99.6)
    await page.getByTestId('current-weight-input').fill('1500');
    await page.waitForTimeout(1000);
    
    // Kapasite kullanƒ±mƒ± kontrol et
    const capacityBar = page.locator('.capacity-bar-label');
    await expect(capacityBar).toContainText('99.6%');
    
    // Kalan aƒüƒ±rlƒ±k kontrol et
    const remainingWeight = page.getByTestId('remaining-weight-input');
    await expect(remainingWeight).toContainText('6 kg');
  });

  test('ULD form responsive tasarƒ±m', async ({ page }) => {
    // Mobil viewport
    await page.setViewportSize({ width: 375, height: 667 });
    await page.reload();
    
    // Form alanlarƒ± g√∂r√ºn√ºr olmalƒ±
    await expect(page.getByTestId('uld-form-title')).toBeVisible();
    await expect(page.getByTestId('uld-type-select')).toBeVisible();
    await expect(page.getByTestId('uld-code-input')).toBeVisible();
  });
});
